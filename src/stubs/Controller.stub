<?php

namespace App\Http\Controllers\Api;

use App\Repositories\{{modelNameUCFirst}}Repository;
use App\Http\Resources\{{modelNameUCFirst}}\{{modelNameUCFirst}}Resource;
use App\Http\Resources\{{modelNameUCFirst}}\{{modelNamePluralUcFirst}}Resource;
use App\Http\Requests\Api\{{modelNameUCFirst}}\CreateRequest;
use App\Http\Requests\Api\{{modelNameUCFirst}}\UpdateRequest;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;

class {{modelNameUCFirst}}Controller extends Controller
{
    protected ${{modelNameCamelCase}}Repo;

    public function __construct({{modelNameUCFirst}}Repository ${{modelNameCamelCase}}Repo)
    {
        $this->{{modelNameCamelCase}}Repo = ${{modelNameCamelCase}}Repo;
    }

    public function index(Request $request)
    {
        $attributes = array();
        $attributes['per_page'] = $request->get('per_page','all');
        $data = $this->{{modelNameCamelCase}}Repo->getAll($attributes);

        return new {{modelNamePluralUcFirst}}Resource($data);
    }

    public function store(CreateRequest $request)
    {
        $attributes = array();
        {{storeAttributes}}

        $response = $this->{{modelNameCamelCase}}Repo->create($attributes);

        return new {{modelNameUCFirst}}Resource($response);
    }

    public function show($id)
    {
        $response = $this->{{modelNameCamelCase}}Repo->getById($id);

        return new {{modelNameUCFirst}}Resource($response);
    }

    public function update(UpdateRequest $request, $id)
    {
        $attributes = array();
        {{updateAttributes}}

        $response = $this->{{modelNameCamelCase}}Repo->update($id,$attributes);

        return new {{modelNameUCFirst}}Resource($response);
    }

    public function destroy($id)
    {

    }
}